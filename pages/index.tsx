import Head from "next/head";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import FilterButton from "./FilterButton";
import Footer from "./Footer";

export default function Home() {
  const [todo, setTodo] = useState<string>("");
  const [todos, setTodos] = useState<any[]>([]);
  const [completedTodoCount, setCompletedTodoCount] = useState(0);
  const [checked, setChecked] = useState(false);
  const [edit, setEditing] = useState(null);
  const [edittext, setEditingText] = useState("");
  const [filter, setFilter] = useState("All");

  const addTodo = (e: any) => {
    if (todo !== "") {
      if (e.key === "Enter") {
        const id = todos.length + 1;
        setTodos((prev) => [
          ...prev,
          {
            id: id,
            task: todo,
            complete: false,
          },
        ]);
        setTodo("");
      }
    }
  };

  type FilterMapTypes = {
    [key: string]: any;
  };

  const FILTER_MAP: FilterMapTypes = {
    All: () => true,
    Active: (todo: any) => !todo.complete,
    Completed: (todo: any) => todo.complete,
  };

  const filterNames = Object.keys(FILTER_MAP);

  const filterList = filterNames.map((name) => (
    <FilterButton
      key={name}
      name={name}
      isPressed={name === filter}
      setFilter={setFilter}
      onClick={() => {}}
    />
  ));

  const handleChange = () => {
    setChecked(!checked);
  };

  const handleComplete = (id: number) => {
    let list = todos.map((task) => {
      let item = {};
      if (task.id == id) {
        if (!task.complete) {
          setCompletedTodoCount(completedTodoCount + 1);
        } else {
          setCompletedTodoCount(completedTodoCount - 1);
        }
        item = { ...task, complete: !task.complete };
      } else item = { ...task };
      return item;
    });
    setTodos(list);
  };

  const deleteTodo = (text: string) => {
    const newTodos = todos.filter((todo) => {
      return todo !== text;
    });
    setTodos(newTodos);
  };

  const clearCompleted = () => {
    let filtered = todos.filter((task) => {
      return !task.complete;
    });
    setTodos(filtered);
  };

  const EditHandler = (e: any) => {
    setEditingText(e.target.value);
  };

  const SubmitEdit = (id: number) => {
    setTodos(
      [...todos].map((todo) => {
        if (todo.id === id) {
          todo.task = edittext;
        }
        return todo;
      })
    );
    setEditing(null);
    setEditingText("");
  };

  const count = todos.filter((todo) => !todo.complete).length;

  return (
    <div className={styles.container}>
      <Head>
        <title>Todo Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>todos</h1>
        <input
          type="text"
          name="todo"
          value={todo}
          className={styles.input}
          placeholder="What needs to be done?"
          onChange={(event) => {
            setTodo(event.target.value);
          }}
          onKeyDown={addTodo}
        />

        <ul className={styles.todoContainer}>
          {todos.filter(FILTER_MAP[filter]).map((todo) => {
            return (
              <div key={todo.id} className={styles.toggleWrapper}>
                <label className={styles.checkboxContainer}>
                  <input
                    className={styles.toggle}
                    type="checkbox"
                    onClick={() => handleChange}
                  ></input>
                  {edit === todo.id ? null : (
                    <span
                      className={styles.checkmark}
                      onClick={() => handleComplete(todo.id)}
                      style={{
                        textDecoration: todo.complete && "line-through",
                      }}
                    ></span>
                  )}
                </label>

                {edit === todo.id ? (
                  <>
                    <input
                      type="text"
                      value={edittext}
                      onChange={EditHandler}
                      className={styles.inputEdit}
                      onBlur={() => SubmitEdit(todo.id)}
                    />
                  </>
                ) : (
                  <li
                    className={styles.todoWrapper}
                    key={todo.id}
                    style={{
                      textDecoration: todo.complete && "line-through",
                      color: todo.complete && "#d9d9d9",
                    }}
                    onDoubleClick={() => {
                      setEditing(todo.id);
                      setEditingText(todo.task);
                    }}
                  >
                    {todo.task}
                  </li>
                )}

                <button
                  className={styles.deleteBtn}
                  onClick={() => {
                    deleteTodo(todo);
                  }}
                >
                  x
                </button>
              </div>
            );
          })}

          {todos.length > 0 ? (
            <div className={styles.filtersContainer}>
              <div className={styles.infoContainer}>
                <span className={styles.todoCount}>{count} items left</span>
                <ul className={styles.filters}>{filterList}</ul>
              </div>
              <div>
                {completedTodoCount ? (
                  <button className={styles.btnClear} onClick={clearCompleted}>
                    Clear completed
                  </button>
                ) : null}
              </div>
            </div>
          ) : null}
        </ul>
      </main>

      <footer>
        <Footer />
      </footer>
    </div>
  );
}
